#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

services:
  hive:
    image: apache/gravitino-playground:${HIVE_IMAGE_TAG}
    ports:
      - "3307:3306"
      - "19000:9000"
      - "19083:9083"
      - "60070:50070"
    container_name: metadatahub-hive
    environment:
      - HADOOP_USER_NAME=hive
    entrypoint: /bin/bash /tmp/hive/init.sh
    volumes:
      - ./init/hive:/tmp/hive
      - ./data/hive:/opt/hive/data
    healthcheck:
      test: ["CMD", "/tmp/check-status.sh"]
      interval: 10s
      timeout: 60s
      retries: 5
      start_period: 20s
    mem_limit: 2g
    cpus: 2

  ranger:
    image: apache/gravitino-playground:${RANGER_IMAGE_TAG}
    ports:
      - "6080:6080"
    container_name: metadatahub-ranger
    entrypoint: /bin/bash /tmp/ranger/init.sh
    volumes:
      - ./healthcheck:/tmp/healthcheck
      - ./init/ranger:/tmp/ranger
    healthcheck:
      test: ["CMD", "/tmp/healthcheck/ranger-healthcheck.sh"]
      interval: 5s
      timeout: 60s
      retries: 5
      start_period: 120s

  gravitino:
    image: apache/gravitino:${GRAVITINO_IMAGE_TAG}
    entrypoint: /bin/bash /tmp/gravitino/init.sh
    ports:
      - "8090:8090"
      - "9001:9001"
    container_name: metadatahub-gravitino
    depends_on:
      hive:
        condition: service_healthy
      ranger:
        condition: service_healthy
      mysql:
        condition: service_healthy
    volumes:
      - ./healthcheck:/tmp/healthcheck
      - ./init/gravitino:/tmp/gravitino
      - ./data/gravitino:/root/gravitino/data
    healthcheck:
      test: ["CMD", "/tmp/healthcheck/gravitino-healthcheck.sh"]
      interval: 10s
      timeout: 60s
      retries: 5
      start_period: 20s

  trino:
    image: apache/gravitino-playground:${TRINO_IMAGE_TAG}
    ports:
      - "18080:8080"
    container_name: metadatahub-trino
    environment:
      - HADOOP_USER_NAME=root
      - GRAVITINO_HOST_IP=gravitino
      - GRAVITINO_HOST_PORT=8090
      - GRAVITINO_METALAKE_NAME=metalake_demo
      - HIVE_HOST_IP=hive
      - POSTGRESQL_HOST_IP=postgresql
    entrypoint: /bin/bash /tmp/trino/init.sh
    volumes:
      - ./init/trino:/tmp/trino
      - ./init/common:/tmp/common
      - ./healthcheck:/tmp/healthcheck
    depends_on:
      hive:
        condition: service_healthy
      gravitino:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "/tmp/healthcheck/trino-healthcheck.sh"]
      interval: 10s
      timeout: 60s
      retries: 5
      start_period: 20s
    mem_limit: 2g
    cpus: 1

  postgresql:
    image: postgres:${POSTGRESQL_IMAGE_TAG}
    container_name: metadatahub-postgresql
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DATABASE: db
    ports:
      - "15432:5432"
    volumes:
      - ./init/postgres:/docker-entrypoint-initdb.d/
      - ./data/postgresql:/var/lib/postgresql/data

  mysql:
    image: mysql:${MYSQL_IMAGE_TAG}
    container_name: metadatahub-mysql
    environment:
      - MYSQL_ROOT_PASSWORD=mysql
      - MYSQL_USER=mysql
      - MYSQL_PASSWORD=mysql
      - MYSQL_DATABASE=db
    ports:
      - "13306:3306"
    volumes:
      - ./init/mysql:/docker-entrypoint-initdb.d/
      - ./healthcheck:/tmp/healthcheck
      - ./data/mysql:/var/lib/mysql
    command: 
      --default-authentication-plugin=mysql_native_password
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_general_ci
      --explicit_defaults_for_timestamp=true
      --lower_case_table_names=1
    healthcheck:
      test: ["CMD", "/bin/bash", "/tmp/healthcheck/mysql-healthcheck.sh"]
      interval: 5s
      timeout: 60s
      retries: 5
      start_period: 20s

  kafka:
    image: bitnami/kafka:${KAFKA_IMAGE_TAG}
    container_name: metadatahub-kafka
    ports:
      - "19092:19092"
      - "9092:9092"
    environment:
      KAFKA_CFG_NODE_ID: "0"
      KAFKA_CFG_PROCESS_ROLES: "broker,controller"
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: "0@kafka:9093"
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_LISTENERS: "INTERNAL://:9092,EXTERNAL://:19092,CONTROLLER://:9093"
      KAFKA_CFG_ADVERTISED_LISTENERS: "INTERNAL://kafka:9092,EXTERNAL://localhost:19092"
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: "INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT"
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_KRAFT_CLUSTER_ID: "abcdefghijklmnopqrstuv"
    command: >
      bash -c "
        /opt/bitnami/scripts/kafka/run.sh &
        pid=$!;
        bash /tmp/kafka/init.sh;
        wait $pid
      "
    volumes:
      - ./init/kafka/init.sh:/tmp/kafka/init.sh
      - ./data/kafka:/bitnami/kafka

  spark:
    image: spark:${SPARK_IMAGE_TAG}
    container_name: metadatahub-spark
    depends_on:
      gravitino:
        condition: service_healthy
    entrypoint: /bin/bash /tmp/spark/init.sh
    environment:
      - HADOOP_USER_NAME=hive
      - HIVE_HOST_IP=hive
      - MYSQL_HOST_IP=mysql
      - SPARK_CONNECTOR_JAR=${SPARK_CONNECTOR_JAR}
      - GRAVITINO_VERSION=${GRAVITINO_VERSION}
    ports:
      - "14040:4040"
      - "17077:7077"
    volumes:
      - ./init/spark:/tmp/spark
      - ./init/common:/tmp/common
    mem_limit: 4g
    cpus: 2
    
  flink:
    image: flink:${FLINK_IMAGE_TAG}
    container_name: metadatahub-flink
    depends_on:
      gravitino:
        condition: service_healthy
      hive:
        condition: service_healthy
    entrypoint: /bin/bash /tmp/flink/init.sh
    environment:
      - HADOOP_USER_NAME=hive
      - HIVE_HOST_IP=hive
      - MYSQL_HOST_IP=mysql
      - FLINK_CONNECTOR_JAR=${FLINK_CONNECTOR_JAR}
      - GRAVITINO_VERSION=${GRAVITINO_VERSION}
    ports:
      - "18081:8081"
    volumes:
      - ./init/flink:/tmp/flink
    mem_limit: 3g
    cpus: 2
